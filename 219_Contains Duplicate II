//use unordered set
class Solution {
public:
    bool containsNearbyDuplicate(vector<int>& nums, int k) {
        if (k < 1) return false;
        if(nums.size() < 2) return false;
        
        k = k<nums.size()-1? k:nums.size()-1;
        unordered_set<int> bag;
        for (int i = 0; i <nums.size(); i++)
        {
            if (i > k ) bag.erase(nums[i-k-1]);
            if(bag.find(nums[i]) != bag.end()) return true;
            bag.insert(nums[i]);
        }
        return false;
    }
};




class Solution {
public:
    bool containsNearbyDuplicate(vector<int>& nums, int k) {
        if(nums.size()<2) return false;
        if (k == 0) return false;      
            k =  k< nums.size()-1 ? k:nums.size()-1;
            vector<int> nums_k(nums.begin(), nums.begin()+k+1);    
            sort(nums_k.begin(), nums_k.end());
            
            for(int i = 0; i < nums_k.size()-1; i++)
            {
                if (nums_k[i] ==nums_k[i+1]) return true;
            }        
            for(int i = 1; i<nums.size()-k; i++)
            {
                for(int j = i; j<i+k; j++)
                {
                    if (nums[j] == nums[i+k]) return true;
                }
            }            
            return false;
    }
};
